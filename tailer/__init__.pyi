from io import TextIOBase
from typing import Generator, List, Optional, Tuple


class Tailer:
    line_terminators: Tuple[str, str, str]
    def __init__(self, file: TextIOBase, read_size: int = 1024, end: bool = False) -> None: ...
    def splitlines(self, data: str) -> List[str]: ...
    def seek_end(self) -> None: ...
    def seek(self, pos: int, whence: int = 0) -> None: ...
    def read(self, read_size: Optional[int] = None) -> Tuple[int, str]: ...
    def seek_line_forward(self) -> Optional[int]: ...
    def seek_line(self) -> Optional[int]: ...
    def tail(self, lines: int = 10) -> List[str]: ...
    def head(self, lines: int = 10) -> List[str]: ...
    def follow(self, delay: float = 1.0) -> Generator: ...
    def __iter__(self) -> Generator: ...
    def close(self) -> None: ...
